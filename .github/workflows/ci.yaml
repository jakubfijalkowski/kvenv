on: [push, pull_request]

name: Build & Release

jobs:
  check:
    name: Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      - uses: actions-rs/cargo@v1
        name: "cargo check"
        with:
          command: check

  fmt:
    name: Rustfmt
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
          components: rustfmt
      - uses: actions-rs/cargo@v1
        name: "cargo fmt"
        with:
          command: fmt
          args: --all -- --check

  clippy:
    name: Clippy
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
          components: clippy
      - uses: actions-rs/cargo@v1
        name: "cargo clippy"
        with:
          command: clippy
          args: -- -D warnings

  test:
    name: Test Suite
    runs-on: ubuntu-latest
    services:
      vault:
        image: vault
        ports:
          - 8200:8200
        env:
          VAULT_DEV_ROOT_TOKEN_ID: test-token
    strategy:
      matrix:
        target:
        - x86_64-unknown-linux-gnu
        - x86_64-unknown-linux-musl
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          target: ${{ matrix.target }}
          override: true
      - name: "create Vault secrets"
        run: |
          mkdir /tmp/vault-cli
          cd /tmp/vault-cli
          curl -LO https://releases.hashicorp.com/vault/1.12.2/vault_1.12.2_linux_amd64.zip
          unzip vault_1.12.2_linux_amd64.zip
          chmod +x vault
          ./vault kv put secret/prefixed-1 INTEGRATION_TESTS_A=work1 INTEGRATION_TESTS_B=work2
          ./vault kv put secret/prefixed-2 INTEGRATION_TESTS_C=work3
        env:
          VAULT_ADDR: "http://127.0.0.1:8200"
          VAULT_TOKEN: "test-token"
      - uses: actions-rs/cargo@v1
        name: "cargo test"
        with:
          use-cross: ${{ matrix.target != 'x86_64-unknown-linux-gnu' }}
          command: test
          args: --features integration-tests --target ${{ matrix.target }}
        env:
          KVENV_CLIENT_ID: ${{ secrets.KVENV_CLIENT_ID }}
          KVENV_TENANT_ID: ${{ secrets.KVENV_TENANT_ID }}
          KVENV_CLIENT_SECRET: ${{ secrets.KVENV_CLIENT_SECRET }}
          KVENV_KEYVAULT_NAME: ${{ secrets.KVENV_KEYVAULT_NAME }}
          GOOGLE_PROJECT: ${{ secrets.GOOGLE_PROJECT }}
          GOOGLE_APPLICATION_CREDENTIALS_JSON: ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS_JSON }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          VAULT_ADDR: "http://127.0.0.1:8200"
          VAULT_TOKEN: "test-token"
          CROSS_CONTAINER_OPTS: "--network host"

  release:
    name: Create Github Release
    if: contains(github.ref, 'tags/v')
    needs: [check, fmt, clippy, test]
    runs-on: ubuntu-latest
    steps:
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1.0.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: true
          prerelease: false
      - name: Output Release URL File
        run: echo "${{ steps.create_release.outputs.upload_url }}" > release_url.txt
      - name: Save Release URL File for publish
        uses: actions/upload-artifact@v1
        with:
          name: release_url
          path: release_url.txt

  publish:
    name: Upload binaries
    if: contains(github.ref, 'tags/v')
    needs: [check, fmt, clippy, test, release]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target:
        - x86_64-unknown-linux-gnu
        - x86_64-unknown-linux-musl
        features:
        - default
        - azure
        - aws
        - google
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          target: ${{ matrix.target }}
          override: true
      - uses: actions-rs/cargo@v1
        name: Build
        with:
          use-cross: ${{ matrix.target != 'x86_64-unknown-linux-gnu' }}
          command: build
          args: --release --no-default-features --features ${{ matrix.features }} --target ${{ matrix.target }}
      - name: Load Release URL File from release job
        uses: actions/download-artifact@v1
        with:
          name: release_url
      - name: Get Release File Name & Upload URL
        id: get_release_info
        run: |
          value=`cat release_url/release_url.txt`
          echo ::set-output name=upload_url::$value
        env:
          TAG_REF_NAME: ${{ github.ref }}
          REPOSITORY_NAME: ${{ github.repository }}
      - name: Upload Release Asset
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.get_release_info.outputs.upload_url }}
          asset_path: ./target/${{ matrix.target }}/release/kvenv
          asset_name: kvenv-${{ matrix.target }}-${{ matrix.features }}
          asset_content_type: application/octet-stream
